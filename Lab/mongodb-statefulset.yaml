apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-statefulset
spec:
  serviceName: mongodb-headless-service
  replicas: 2 # Assuming you reduced replicas for debugging, adjust as needed
  selector:
    matchLabels:
      app: mongodb-statefulset
  template:
    metadata:
      labels:
        app: mongodb-statefulset
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: mongodb-statefulset
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: fix-data-permissions
          image: busybox:latest
          command: ["sh", "-c", "chown -R 999:999 /data/db && chmod -R 755 /data/db"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
        - name: init-mongodb-replica-set
          image: mongo:6.0.13
          command:
            - "bash"
            - "-c"
            - |
              # Get the current pod's hostname to determine its role
              HOSTNAME=$(hostname)
              
              # Wait for the *current pod's* mongod process to be ready
              # The mongod process will start in the main container *after* this init container completes.
              # So we need to poll the service endpoint.
              # This init container needs to wait for the main container's mongod to be available.
              echo "Waiting for mongod on ${HOSTNAME}.mongodb-headless-service:27017 to be ready..."
              until mongosh --host ${HOSTNAME}.mongodb-headless-service:27017 --eval "db.adminCommand('ping').ok" > /dev/null 2>&1; do
                echo "Still waiting for mongod on ${HOSTNAME}.mongodb-headless-service:27017..."
                sleep 5
              done
              echo "Mongod on ${HOSTNAME}.mongodb-headless-service:27017 is ready."

              # Only the first pod (ordinal 0) initiates the replica set
              if [[ "${HOSTNAME}" == "mongodb-statefulset-0" ]]; then
                echo "Initiating replica set..."
                # Give a little more time for DNS resolution and other pods to potentially start
                # This sleep is after the current pod's mongod is ready.
                # Other pods might still be coming up.
                sleep 10 
                
                # Construct the replica set members array using the correct headless service name
                # All members must be reachable
                MEMBERS="[{_id: 0, host: \"mongodb-statefulset-0.mongodb-headless-service:27017\"},{_id: 1, host: \"mongodb-statefulset-1.mongodb-headless-service:27017\"},{_id: 2, host: \"mongodb-statefulset-2.mongodb-headless-service:27017\"}]"
                echo "Replica set members: $MEMBERS"
                
                # Execute rs.initiate, authenticating with admin user
                # Connect to *this* pod's mongod, as it will become the primary after initiation.
                mongosh --host ${HOSTNAME}.mongodb-headless-service:27017 \
                        --authenticationDatabase admin \
                        -u ${MONGO_INITDB_ROOT_USERNAME} \
                        -p ${MONGO_INITDB_ROOT_PASSWORD} \
                        --eval "rs.initiate({ _id: \"rs0\", members: $MEMBERS });"
                
                # Add members to the replica set one by one after initiation
                # This is a common pattern when you are trying to add all members at once in rs.initiate
                # and some might not be ready yet. For StatefulSets, a single rs.initiate 
                # with all members is usually sufficient if they are DNS-reachable eventually.
                # However, the problem here is the mongod process itself not being up yet.
                echo "Waiting for replica set to form and health check..."
                # Wait for primary to elect itself and for all members to reach a stable state
                until mongosh --host ${HOSTNAME}.mongodb-headless-service:27017 \
                            --authenticationDatabase admin \
                            -u ${MONGO_INITDB_ROOT_USERNAME} \
                            -p ${MONGO_INITDB_ROOT_PASSWORD} \
                            --eval "rs.status().ok == 1 && rs.status().members.length == 3 && rs.status().members.every(m => m.health == 1)" > /dev/null 2>&1; do
                    echo "Waiting for all 3 replica set members to be healthy and formed..."
                    sleep 10
                done
                echo "Replica set initiated and healthy."
              else
                echo "Not the primary pod (mongodb-statefulset-0), skipping replica set initiation."
                # Secondary pods also need to wait for their mongod to be ready.
                # This ensures the init container doesn't exit prematurely for secondaries.
                echo "Secondary pod, ensuring mongod on ${HOSTNAME}.mongodb-headless-service:27017 is ready before completing init."
                until mongosh --host ${HOSTNAME}.mongodb-headless-service:27017 --eval "db.adminCommand('ping').ok" > /dev/null 2>&1; do
                  echo "Still waiting for mongod on ${HOSTNAME}.mongodb-headless-service:27017 (secondary)..."
                  sleep 5
                done
                echo "Mongod on ${HOSTNAME}.mongodb-headless-service:27017 is ready (secondary)."
              fi
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: MONGO_INITDB_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: MONGO_INITDB_ROOT_PASSWORD
          volumeMounts:
            - name: mongodb-keyfile
              mountPath: /etc/mongodb-keyfile
            - name: mongodb-config
              mountPath: /etc/mongod.conf
              subPath: mongod.conf
            - name: mongodb-data
              mountPath: /data/db
      securityContext:
        fsGroup: 999
      containers:
        - name: mongodb
          image: mongo:6.0.13
          securityContext:
            runAsUser: 999
            runAsGroup: 999
          ports:
            - containerPort: 27017
              name: mongodb
          command: ["mongod", "--config", "/etc/mongod.conf"] # Revert to normal mongod command
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping').ok"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('replSetGetStatus').ok || db.adminCommand('ping').ok"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
            - name: mongodb-config
              mountPath: /etc/mongod.conf
              subPath: mongod.conf
            - name: mongodb-keyfile
              mountPath: /etc/mongodb-keyfile
      volumes:
        - name: mongodb-config
          configMap:
            name: mongodb-config
        - name: mongodb-keyfile
          secret:
            secretName: mongodb-keyfile
            defaultMode: 0400
  volumeClaimTemplates:
    - metadata:
        name: mongodb-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
        storageClassName: custom-local-storage-class
